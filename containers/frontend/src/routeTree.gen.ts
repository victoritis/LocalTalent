/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root.lazy'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/auth'
import { Route as LoginIndexRouteImport } from './routes/login/index.route'
import { Route as AuthUserImport } from './routes/auth/user'
import { Route as AuthUserProfileImport } from './routes/auth/user/profile'
import { Route as AuthSuperadminDashboardImport } from './routes/auth/superadmin/dashboard'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const RegisterCreateAccountLazyImport = createFileRoute(
  '/register/create-account',
)()
const LoginResetPasswordLazyImport = createFileRoute('/login/reset-password')()
const LoginRecoverPasswordLazyImport = createFileRoute(
  '/login/recover-password',
)()
const AuthSupportLazyImport = createFileRoute('/auth/support')()
const AuthFeedbackLazyImport = createFileRoute('/auth/feedback')()
const AuthUserIndexLazyImport = createFileRoute('/auth/user/')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LoginIndexRouteRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)

const RegisterCreateAccountLazyRoute = RegisterCreateAccountLazyImport.update({
  id: '/register/create-account',
  path: '/register/create-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/register/create-account.lazy').then((d) => d.Route),
)

const LoginResetPasswordLazyRoute = LoginResetPasswordLazyImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => LoginRoute,
} as any).lazy(() =>
  import('./routes/login/reset-password.lazy').then((d) => d.Route),
)

const LoginRecoverPasswordLazyRoute = LoginRecoverPasswordLazyImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => LoginRoute,
} as any).lazy(() =>
  import('./routes/login/recover-password.lazy').then((d) => d.Route),
)

const AuthSupportLazyRoute = AuthSupportLazyImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/support.lazy').then((d) => d.Route))

const AuthFeedbackLazyRoute = AuthFeedbackLazyImport.update({
  id: '/feedback',
  path: '/feedback',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/feedback.lazy').then((d) => d.Route))

const AuthUserRoute = AuthUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUserIndexLazyRoute = AuthUserIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthUserRoute,
} as any).lazy(() =>
  import('./routes/auth/user/index.lazy').then((d) => d.Route),
)

const AuthUserProfileRoute = AuthUserProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthUserRoute,
} as any)

const AuthSuperadminDashboardRoute = AuthSuperadminDashboardImport.update({
  id: '/superadmin/dashboard',
  path: '/superadmin/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/user': {
      id: '/auth/user'
      path: '/user'
      fullPath: '/auth/user'
      preLoaderRoute: typeof AuthUserImport
      parentRoute: typeof AuthImport
    }
    '/auth/feedback': {
      id: '/auth/feedback'
      path: '/feedback'
      fullPath: '/auth/feedback'
      preLoaderRoute: typeof AuthFeedbackLazyImport
      parentRoute: typeof AuthImport
    }
    '/auth/support': {
      id: '/auth/support'
      path: '/support'
      fullPath: '/auth/support'
      preLoaderRoute: typeof AuthSupportLazyImport
      parentRoute: typeof AuthImport
    }
    '/login/recover-password': {
      id: '/login/recover-password'
      path: '/recover-password'
      fullPath: '/login/recover-password'
      preLoaderRoute: typeof LoginRecoverPasswordLazyImport
      parentRoute: typeof LoginImport
    }
    '/login/reset-password': {
      id: '/login/reset-password'
      path: '/reset-password'
      fullPath: '/login/reset-password'
      preLoaderRoute: typeof LoginResetPasswordLazyImport
      parentRoute: typeof LoginImport
    }
    '/register/create-account': {
      id: '/register/create-account'
      path: '/register/create-account'
      fullPath: '/register/create-account'
      preLoaderRoute: typeof RegisterCreateAccountLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginImport
    }
    '/auth/superadmin/dashboard': {
      id: '/auth/superadmin/dashboard'
      path: '/superadmin/dashboard'
      fullPath: '/auth/superadmin/dashboard'
      preLoaderRoute: typeof AuthSuperadminDashboardImport
      parentRoute: typeof AuthImport
    }
    '/auth/user/profile': {
      id: '/auth/user/profile'
      path: '/profile'
      fullPath: '/auth/user/profile'
      preLoaderRoute: typeof AuthUserProfileImport
      parentRoute: typeof AuthUserImport
    }
    '/auth/user/': {
      id: '/auth/user/'
      path: '/'
      fullPath: '/auth/user/'
      preLoaderRoute: typeof AuthUserIndexLazyImport
      parentRoute: typeof AuthUserImport
    }
  }
}

// Create and export the route tree

interface AuthUserRouteChildren {
  AuthUserProfileRoute: typeof AuthUserProfileRoute
  AuthUserIndexLazyRoute: typeof AuthUserIndexLazyRoute
}

const AuthUserRouteChildren: AuthUserRouteChildren = {
  AuthUserProfileRoute: AuthUserProfileRoute,
  AuthUserIndexLazyRoute: AuthUserIndexLazyRoute,
}

const AuthUserRouteWithChildren = AuthUserRoute._addFileChildren(
  AuthUserRouteChildren,
)

interface AuthRouteChildren {
  AuthUserRoute: typeof AuthUserRouteWithChildren
  AuthFeedbackLazyRoute: typeof AuthFeedbackLazyRoute
  AuthSupportLazyRoute: typeof AuthSupportLazyRoute
  AuthSuperadminDashboardRoute: typeof AuthSuperadminDashboardRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthUserRoute: AuthUserRouteWithChildren,
  AuthFeedbackLazyRoute: AuthFeedbackLazyRoute,
  AuthSupportLazyRoute: AuthSupportLazyRoute,
  AuthSuperadminDashboardRoute: AuthSuperadminDashboardRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface LoginRouteChildren {
  LoginRecoverPasswordLazyRoute: typeof LoginRecoverPasswordLazyRoute
  LoginResetPasswordLazyRoute: typeof LoginResetPasswordLazyRoute
  LoginIndexRouteRoute: typeof LoginIndexRouteRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginRecoverPasswordLazyRoute: LoginRecoverPasswordLazyRoute,
  LoginResetPasswordLazyRoute: LoginResetPasswordLazyRoute,
  LoginIndexRouteRoute: LoginIndexRouteRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/auth/user': typeof AuthUserRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login/': typeof LoginIndexRouteRoute
  '/auth/superadmin/dashboard': typeof AuthSuperadminDashboardRoute
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/user/': typeof AuthUserIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login': typeof LoginIndexRouteRoute
  '/auth/superadmin/dashboard': typeof AuthSuperadminDashboardRoute
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/user': typeof AuthUserIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/auth/user': typeof AuthUserRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login/': typeof LoginIndexRouteRoute
  '/auth/superadmin/dashboard': typeof AuthSuperadminDashboardRoute
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/user/': typeof AuthUserIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/login'
    | '/auth/user'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login/'
    | '/auth/superadmin/dashboard'
    | '/auth/user/profile'
    | '/auth/user/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login'
    | '/auth/superadmin/dashboard'
    | '/auth/user/profile'
    | '/auth/user'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/login'
    | '/auth/user'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login/'
    | '/auth/superadmin/dashboard'
    | '/auth/user/profile'
    | '/auth/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  RegisterCreateAccountLazyRoute: typeof RegisterCreateAccountLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  RegisterCreateAccountLazyRoute: RegisterCreateAccountLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.lazy.tsx",
      "children": [
        "/",
        "/auth",
        "/login",
        "/register/create-account"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/user",
        "/auth/feedback",
        "/auth/support",
        "/auth/superadmin/dashboard"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/recover-password",
        "/login/reset-password",
        "/login/"
      ]
    },
    "/auth/user": {
      "filePath": "auth/user.tsx",
      "parent": "/auth",
      "children": [
        "/auth/user/profile",
        "/auth/user/"
      ]
    },
    "/auth/feedback": {
      "filePath": "auth/feedback.lazy.tsx",
      "parent": "/auth"
    },
    "/auth/support": {
      "filePath": "auth/support.lazy.tsx",
      "parent": "/auth"
    },
    "/login/recover-password": {
      "filePath": "login/recover-password.lazy.tsx",
      "parent": "/login"
    },
    "/login/reset-password": {
      "filePath": "login/reset-password.lazy.tsx",
      "parent": "/login"
    },
    "/register/create-account": {
      "filePath": "register/create-account.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.route.tsx",
      "parent": "/login"
    },
    "/auth/superadmin/dashboard": {
      "filePath": "auth/superadmin/dashboard.tsx",
      "parent": "/auth"
    },
    "/auth/user/profile": {
      "filePath": "auth/user/profile.tsx",
      "parent": "/auth/user"
    },
    "/auth/user/": {
      "filePath": "auth/user/index.lazy.tsx",
      "parent": "/auth/user"
    }
  }
}
ROUTE_MANIFEST_END */
