/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root.lazy'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/auth'
import { Route as LoginIndexRouteImport } from './routes/login/index.route'
import { Route as AuthUserImport } from './routes/auth/user'
import { Route as AuthSuperadminImport } from './routes/auth/superadmin'
import { Route as AuthOrganizationsImport } from './routes/auth/organizations'
import { Route as AuthOrgAdminImport } from './routes/auth/org-admin'
import { Route as AuthGlossaryImport } from './routes/auth/glossary'
import { Route as AuthUserProfileImport } from './routes/auth/user/profile'
import { Route as AuthOrganizationsOrganizationNameImport } from './routes/auth/organizations/$organizationName'
import { Route as AuthGlossaryMatchExplorerImport } from './routes/auth/glossary/match-explorer'

// Create Virtual Routes

const AcceptOrganizationInvitationLazyImport = createFileRoute(
  '/accept-organization-invitation',
)()
const IndexLazyImport = createFileRoute('/')()
const RegisterCreateAccountLazyImport = createFileRoute(
  '/register/create-account',
)()
const LoginResetPasswordLazyImport = createFileRoute('/login/reset-password')()
const LoginRecoverPasswordLazyImport = createFileRoute(
  '/login/recover-password',
)()
const AuthSupportLazyImport = createFileRoute('/auth/support')()
const AuthFeedbackLazyImport = createFileRoute('/auth/feedback')()
const AuthUserIndexLazyImport = createFileRoute('/auth/user/')()
const AuthSuperadminIndexLazyImport = createFileRoute('/auth/superadmin/')()
const AuthOrganizationsIndexLazyImport = createFileRoute(
  '/auth/organizations/',
)()
const AuthOrgAdminIndexLazyImport = createFileRoute('/auth/org-admin/')()
const AuthSuperadminViewFeedbackLazyImport = createFileRoute(
  '/auth/superadmin/view-feedback',
)()
const AuthSuperadminManageOrganizationsLazyImport = createFileRoute(
  '/auth/superadmin/manage-organizations',
)()
const AuthSuperadminDataSynchronizationLazyImport = createFileRoute(
  '/auth/superadmin/data-synchronization',
)()
const AuthSuperadminDataStatusLazyImport = createFileRoute(
  '/auth/superadmin/data-status',
)()
const AuthSuperadminCreateOrganizationLazyImport = createFileRoute(
  '/auth/superadmin/create-organization',
)()
const AuthOrganizationsMyOrganizationsLazyImport = createFileRoute(
  '/auth/organizations/my-organizations',
)()
const AuthOrgAdminManageOrganizationsLazyImport = createFileRoute(
  '/auth/org-admin/manage-organizations',
)()
const AuthGlossaryCveExplorerLazyImport = createFileRoute(
  '/auth/glossary/cve-explorer',
)()
const AuthGlossaryCpeExplorerLazyImport = createFileRoute(
  '/auth/glossary/cpe-explorer',
)()
const AuthOrganizationsOrganizationNameIndexLazyImport = createFileRoute(
  '/auth/organizations/$organizationName/',
)()
const AuthOrganizationsOrganizationNameProductsLazyImport = createFileRoute(
  '/auth/organizations/$organizationName/products',
)()
const AuthOrganizationsOrganizationNameOverviewLazyImport = createFileRoute(
  '/auth/organizations/$organizationName/overview',
)()
const AuthOrganizationsOrganizationNameAlertsLazyImport = createFileRoute(
  '/auth/organizations/$organizationName/alerts',
)()
const AuthOrganizationsOrganizationNameAddProductsLazyImport = createFileRoute(
  '/auth/organizations/$organizationName/add-products',
)()

// Create/Update Routes

const AcceptOrganizationInvitationLazyRoute =
  AcceptOrganizationInvitationLazyImport.update({
    id: '/accept-organization-invitation',
    path: '/accept-organization-invitation',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/accept-organization-invitation.lazy').then((d) => d.Route),
  )

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LoginIndexRouteRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)

const RegisterCreateAccountLazyRoute = RegisterCreateAccountLazyImport.update({
  id: '/register/create-account',
  path: '/register/create-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/register/create-account.lazy').then((d) => d.Route),
)

const LoginResetPasswordLazyRoute = LoginResetPasswordLazyImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => LoginRoute,
} as any).lazy(() =>
  import('./routes/login/reset-password.lazy').then((d) => d.Route),
)

const LoginRecoverPasswordLazyRoute = LoginRecoverPasswordLazyImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => LoginRoute,
} as any).lazy(() =>
  import('./routes/login/recover-password.lazy').then((d) => d.Route),
)

const AuthSupportLazyRoute = AuthSupportLazyImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/support.lazy').then((d) => d.Route))

const AuthFeedbackLazyRoute = AuthFeedbackLazyImport.update({
  id: '/feedback',
  path: '/feedback',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/feedback.lazy').then((d) => d.Route))

const AuthUserRoute = AuthUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSuperadminRoute = AuthSuperadminImport.update({
  id: '/superadmin',
  path: '/superadmin',
  getParentRoute: () => AuthRoute,
} as any)

const AuthOrganizationsRoute = AuthOrganizationsImport.update({
  id: '/organizations',
  path: '/organizations',
  getParentRoute: () => AuthRoute,
} as any)

const AuthOrgAdminRoute = AuthOrgAdminImport.update({
  id: '/org-admin',
  path: '/org-admin',
  getParentRoute: () => AuthRoute,
} as any)

const AuthGlossaryRoute = AuthGlossaryImport.update({
  id: '/glossary',
  path: '/glossary',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUserIndexLazyRoute = AuthUserIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthUserRoute,
} as any).lazy(() =>
  import('./routes/auth/user/index.lazy').then((d) => d.Route),
)

const AuthSuperadminIndexLazyRoute = AuthSuperadminIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthSuperadminRoute,
} as any).lazy(() =>
  import('./routes/auth/superadmin/index.lazy').then((d) => d.Route),
)

const AuthOrganizationsIndexLazyRoute = AuthOrganizationsIndexLazyImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => AuthOrganizationsRoute,
  } as any,
).lazy(() =>
  import('./routes/auth/organizations/index.lazy').then((d) => d.Route),
)

const AuthOrgAdminIndexLazyRoute = AuthOrgAdminIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthOrgAdminRoute,
} as any).lazy(() =>
  import('./routes/auth/org-admin/index.lazy').then((d) => d.Route),
)

const AuthSuperadminViewFeedbackLazyRoute =
  AuthSuperadminViewFeedbackLazyImport.update({
    id: '/view-feedback',
    path: '/view-feedback',
    getParentRoute: () => AuthSuperadminRoute,
  } as any).lazy(() =>
    import('./routes/auth/superadmin/view-feedback.lazy').then((d) => d.Route),
  )

const AuthSuperadminManageOrganizationsLazyRoute =
  AuthSuperadminManageOrganizationsLazyImport.update({
    id: '/manage-organizations',
    path: '/manage-organizations',
    getParentRoute: () => AuthSuperadminRoute,
  } as any).lazy(() =>
    import('./routes/auth/superadmin/manage-organizations.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthSuperadminDataSynchronizationLazyRoute =
  AuthSuperadminDataSynchronizationLazyImport.update({
    id: '/data-synchronization',
    path: '/data-synchronization',
    getParentRoute: () => AuthSuperadminRoute,
  } as any).lazy(() =>
    import('./routes/auth/superadmin/data-synchronization.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthSuperadminDataStatusLazyRoute =
  AuthSuperadminDataStatusLazyImport.update({
    id: '/data-status',
    path: '/data-status',
    getParentRoute: () => AuthSuperadminRoute,
  } as any).lazy(() =>
    import('./routes/auth/superadmin/data-status.lazy').then((d) => d.Route),
  )

const AuthSuperadminCreateOrganizationLazyRoute =
  AuthSuperadminCreateOrganizationLazyImport.update({
    id: '/create-organization',
    path: '/create-organization',
    getParentRoute: () => AuthSuperadminRoute,
  } as any).lazy(() =>
    import('./routes/auth/superadmin/create-organization.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrganizationsMyOrganizationsLazyRoute =
  AuthOrganizationsMyOrganizationsLazyImport.update({
    id: '/my-organizations',
    path: '/my-organizations',
    getParentRoute: () => AuthOrganizationsRoute,
  } as any).lazy(() =>
    import('./routes/auth/organizations/my-organizations.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrgAdminManageOrganizationsLazyRoute =
  AuthOrgAdminManageOrganizationsLazyImport.update({
    id: '/manage-organizations',
    path: '/manage-organizations',
    getParentRoute: () => AuthOrgAdminRoute,
  } as any).lazy(() =>
    import('./routes/auth/org-admin/manage-organizations.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthGlossaryCveExplorerLazyRoute =
  AuthGlossaryCveExplorerLazyImport.update({
    id: '/cve-explorer',
    path: '/cve-explorer',
    getParentRoute: () => AuthGlossaryRoute,
  } as any).lazy(() =>
    import('./routes/auth/glossary/cve-explorer.lazy').then((d) => d.Route),
  )

const AuthGlossaryCpeExplorerLazyRoute =
  AuthGlossaryCpeExplorerLazyImport.update({
    id: '/cpe-explorer',
    path: '/cpe-explorer',
    getParentRoute: () => AuthGlossaryRoute,
  } as any).lazy(() =>
    import('./routes/auth/glossary/cpe-explorer.lazy').then((d) => d.Route),
  )

const AuthUserProfileRoute = AuthUserProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthUserRoute,
} as any)

const AuthOrganizationsOrganizationNameRoute =
  AuthOrganizationsOrganizationNameImport.update({
    id: '/$organizationName',
    path: '/$organizationName',
    getParentRoute: () => AuthOrganizationsRoute,
  } as any)

const AuthGlossaryMatchExplorerRoute = AuthGlossaryMatchExplorerImport.update({
  id: '/match-explorer',
  path: '/match-explorer',
  getParentRoute: () => AuthGlossaryRoute,
} as any).lazy(() =>
  import('./routes/auth/glossary/match-explorer.lazy').then((d) => d.Route),
)

const AuthOrganizationsOrganizationNameIndexLazyRoute =
  AuthOrganizationsOrganizationNameIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthOrganizationsOrganizationNameRoute,
  } as any).lazy(() =>
    import('./routes/auth/organizations/$organizationName/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrganizationsOrganizationNameProductsLazyRoute =
  AuthOrganizationsOrganizationNameProductsLazyImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => AuthOrganizationsOrganizationNameRoute,
  } as any).lazy(() =>
    import('./routes/auth/organizations/$organizationName/products.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrganizationsOrganizationNameOverviewLazyRoute =
  AuthOrganizationsOrganizationNameOverviewLazyImport.update({
    id: '/overview',
    path: '/overview',
    getParentRoute: () => AuthOrganizationsOrganizationNameRoute,
  } as any).lazy(() =>
    import('./routes/auth/organizations/$organizationName/overview.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrganizationsOrganizationNameAlertsLazyRoute =
  AuthOrganizationsOrganizationNameAlertsLazyImport.update({
    id: '/alerts',
    path: '/alerts',
    getParentRoute: () => AuthOrganizationsOrganizationNameRoute,
  } as any).lazy(() =>
    import('./routes/auth/organizations/$organizationName/alerts.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthOrganizationsOrganizationNameAddProductsLazyRoute =
  AuthOrganizationsOrganizationNameAddProductsLazyImport.update({
    id: '/add-products',
    path: '/add-products',
    getParentRoute: () => AuthOrganizationsOrganizationNameRoute,
  } as any).lazy(() =>
    import(
      './routes/auth/organizations/$organizationName/add-products.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/accept-organization-invitation': {
      id: '/accept-organization-invitation'
      path: '/accept-organization-invitation'
      fullPath: '/accept-organization-invitation'
      preLoaderRoute: typeof AcceptOrganizationInvitationLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/glossary': {
      id: '/auth/glossary'
      path: '/glossary'
      fullPath: '/auth/glossary'
      preLoaderRoute: typeof AuthGlossaryImport
      parentRoute: typeof AuthImport
    }
    '/auth/org-admin': {
      id: '/auth/org-admin'
      path: '/org-admin'
      fullPath: '/auth/org-admin'
      preLoaderRoute: typeof AuthOrgAdminImport
      parentRoute: typeof AuthImport
    }
    '/auth/organizations': {
      id: '/auth/organizations'
      path: '/organizations'
      fullPath: '/auth/organizations'
      preLoaderRoute: typeof AuthOrganizationsImport
      parentRoute: typeof AuthImport
    }
    '/auth/superadmin': {
      id: '/auth/superadmin'
      path: '/superadmin'
      fullPath: '/auth/superadmin'
      preLoaderRoute: typeof AuthSuperadminImport
      parentRoute: typeof AuthImport
    }
    '/auth/user': {
      id: '/auth/user'
      path: '/user'
      fullPath: '/auth/user'
      preLoaderRoute: typeof AuthUserImport
      parentRoute: typeof AuthImport
    }
    '/auth/feedback': {
      id: '/auth/feedback'
      path: '/feedback'
      fullPath: '/auth/feedback'
      preLoaderRoute: typeof AuthFeedbackLazyImport
      parentRoute: typeof AuthImport
    }
    '/auth/support': {
      id: '/auth/support'
      path: '/support'
      fullPath: '/auth/support'
      preLoaderRoute: typeof AuthSupportLazyImport
      parentRoute: typeof AuthImport
    }
    '/login/recover-password': {
      id: '/login/recover-password'
      path: '/recover-password'
      fullPath: '/login/recover-password'
      preLoaderRoute: typeof LoginRecoverPasswordLazyImport
      parentRoute: typeof LoginImport
    }
    '/login/reset-password': {
      id: '/login/reset-password'
      path: '/reset-password'
      fullPath: '/login/reset-password'
      preLoaderRoute: typeof LoginResetPasswordLazyImport
      parentRoute: typeof LoginImport
    }
    '/register/create-account': {
      id: '/register/create-account'
      path: '/register/create-account'
      fullPath: '/register/create-account'
      preLoaderRoute: typeof RegisterCreateAccountLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginImport
    }
    '/auth/glossary/match-explorer': {
      id: '/auth/glossary/match-explorer'
      path: '/match-explorer'
      fullPath: '/auth/glossary/match-explorer'
      preLoaderRoute: typeof AuthGlossaryMatchExplorerImport
      parentRoute: typeof AuthGlossaryImport
    }
    '/auth/organizations/$organizationName': {
      id: '/auth/organizations/$organizationName'
      path: '/$organizationName'
      fullPath: '/auth/organizations/$organizationName'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameImport
      parentRoute: typeof AuthOrganizationsImport
    }
    '/auth/user/profile': {
      id: '/auth/user/profile'
      path: '/profile'
      fullPath: '/auth/user/profile'
      preLoaderRoute: typeof AuthUserProfileImport
      parentRoute: typeof AuthUserImport
    }
    '/auth/glossary/cpe-explorer': {
      id: '/auth/glossary/cpe-explorer'
      path: '/cpe-explorer'
      fullPath: '/auth/glossary/cpe-explorer'
      preLoaderRoute: typeof AuthGlossaryCpeExplorerLazyImport
      parentRoute: typeof AuthGlossaryImport
    }
    '/auth/glossary/cve-explorer': {
      id: '/auth/glossary/cve-explorer'
      path: '/cve-explorer'
      fullPath: '/auth/glossary/cve-explorer'
      preLoaderRoute: typeof AuthGlossaryCveExplorerLazyImport
      parentRoute: typeof AuthGlossaryImport
    }
    '/auth/org-admin/manage-organizations': {
      id: '/auth/org-admin/manage-organizations'
      path: '/manage-organizations'
      fullPath: '/auth/org-admin/manage-organizations'
      preLoaderRoute: typeof AuthOrgAdminManageOrganizationsLazyImport
      parentRoute: typeof AuthOrgAdminImport
    }
    '/auth/organizations/my-organizations': {
      id: '/auth/organizations/my-organizations'
      path: '/my-organizations'
      fullPath: '/auth/organizations/my-organizations'
      preLoaderRoute: typeof AuthOrganizationsMyOrganizationsLazyImport
      parentRoute: typeof AuthOrganizationsImport
    }
    '/auth/superadmin/create-organization': {
      id: '/auth/superadmin/create-organization'
      path: '/create-organization'
      fullPath: '/auth/superadmin/create-organization'
      preLoaderRoute: typeof AuthSuperadminCreateOrganizationLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/superadmin/data-status': {
      id: '/auth/superadmin/data-status'
      path: '/data-status'
      fullPath: '/auth/superadmin/data-status'
      preLoaderRoute: typeof AuthSuperadminDataStatusLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/superadmin/data-synchronization': {
      id: '/auth/superadmin/data-synchronization'
      path: '/data-synchronization'
      fullPath: '/auth/superadmin/data-synchronization'
      preLoaderRoute: typeof AuthSuperadminDataSynchronizationLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/superadmin/manage-organizations': {
      id: '/auth/superadmin/manage-organizations'
      path: '/manage-organizations'
      fullPath: '/auth/superadmin/manage-organizations'
      preLoaderRoute: typeof AuthSuperadminManageOrganizationsLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/superadmin/view-feedback': {
      id: '/auth/superadmin/view-feedback'
      path: '/view-feedback'
      fullPath: '/auth/superadmin/view-feedback'
      preLoaderRoute: typeof AuthSuperadminViewFeedbackLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/org-admin/': {
      id: '/auth/org-admin/'
      path: '/'
      fullPath: '/auth/org-admin/'
      preLoaderRoute: typeof AuthOrgAdminIndexLazyImport
      parentRoute: typeof AuthOrgAdminImport
    }
    '/auth/organizations/': {
      id: '/auth/organizations/'
      path: '/'
      fullPath: '/auth/organizations/'
      preLoaderRoute: typeof AuthOrganizationsIndexLazyImport
      parentRoute: typeof AuthOrganizationsImport
    }
    '/auth/superadmin/': {
      id: '/auth/superadmin/'
      path: '/'
      fullPath: '/auth/superadmin/'
      preLoaderRoute: typeof AuthSuperadminIndexLazyImport
      parentRoute: typeof AuthSuperadminImport
    }
    '/auth/user/': {
      id: '/auth/user/'
      path: '/'
      fullPath: '/auth/user/'
      preLoaderRoute: typeof AuthUserIndexLazyImport
      parentRoute: typeof AuthUserImport
    }
    '/auth/organizations/$organizationName/add-products': {
      id: '/auth/organizations/$organizationName/add-products'
      path: '/add-products'
      fullPath: '/auth/organizations/$organizationName/add-products'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameAddProductsLazyImport
      parentRoute: typeof AuthOrganizationsOrganizationNameImport
    }
    '/auth/organizations/$organizationName/alerts': {
      id: '/auth/organizations/$organizationName/alerts'
      path: '/alerts'
      fullPath: '/auth/organizations/$organizationName/alerts'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameAlertsLazyImport
      parentRoute: typeof AuthOrganizationsOrganizationNameImport
    }
    '/auth/organizations/$organizationName/overview': {
      id: '/auth/organizations/$organizationName/overview'
      path: '/overview'
      fullPath: '/auth/organizations/$organizationName/overview'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameOverviewLazyImport
      parentRoute: typeof AuthOrganizationsOrganizationNameImport
    }
    '/auth/organizations/$organizationName/products': {
      id: '/auth/organizations/$organizationName/products'
      path: '/products'
      fullPath: '/auth/organizations/$organizationName/products'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameProductsLazyImport
      parentRoute: typeof AuthOrganizationsOrganizationNameImport
    }
    '/auth/organizations/$organizationName/': {
      id: '/auth/organizations/$organizationName/'
      path: '/'
      fullPath: '/auth/organizations/$organizationName/'
      preLoaderRoute: typeof AuthOrganizationsOrganizationNameIndexLazyImport
      parentRoute: typeof AuthOrganizationsOrganizationNameImport
    }
  }
}

// Create and export the route tree

interface AuthGlossaryRouteChildren {
  AuthGlossaryMatchExplorerRoute: typeof AuthGlossaryMatchExplorerRoute
  AuthGlossaryCpeExplorerLazyRoute: typeof AuthGlossaryCpeExplorerLazyRoute
  AuthGlossaryCveExplorerLazyRoute: typeof AuthGlossaryCveExplorerLazyRoute
}

const AuthGlossaryRouteChildren: AuthGlossaryRouteChildren = {
  AuthGlossaryMatchExplorerRoute: AuthGlossaryMatchExplorerRoute,
  AuthGlossaryCpeExplorerLazyRoute: AuthGlossaryCpeExplorerLazyRoute,
  AuthGlossaryCveExplorerLazyRoute: AuthGlossaryCveExplorerLazyRoute,
}

const AuthGlossaryRouteWithChildren = AuthGlossaryRoute._addFileChildren(
  AuthGlossaryRouteChildren,
)

interface AuthOrgAdminRouteChildren {
  AuthOrgAdminManageOrganizationsLazyRoute: typeof AuthOrgAdminManageOrganizationsLazyRoute
  AuthOrgAdminIndexLazyRoute: typeof AuthOrgAdminIndexLazyRoute
}

const AuthOrgAdminRouteChildren: AuthOrgAdminRouteChildren = {
  AuthOrgAdminManageOrganizationsLazyRoute:
    AuthOrgAdminManageOrganizationsLazyRoute,
  AuthOrgAdminIndexLazyRoute: AuthOrgAdminIndexLazyRoute,
}

const AuthOrgAdminRouteWithChildren = AuthOrgAdminRoute._addFileChildren(
  AuthOrgAdminRouteChildren,
)

interface AuthOrganizationsOrganizationNameRouteChildren {
  AuthOrganizationsOrganizationNameAddProductsLazyRoute: typeof AuthOrganizationsOrganizationNameAddProductsLazyRoute
  AuthOrganizationsOrganizationNameAlertsLazyRoute: typeof AuthOrganizationsOrganizationNameAlertsLazyRoute
  AuthOrganizationsOrganizationNameOverviewLazyRoute: typeof AuthOrganizationsOrganizationNameOverviewLazyRoute
  AuthOrganizationsOrganizationNameProductsLazyRoute: typeof AuthOrganizationsOrganizationNameProductsLazyRoute
  AuthOrganizationsOrganizationNameIndexLazyRoute: typeof AuthOrganizationsOrganizationNameIndexLazyRoute
}

const AuthOrganizationsOrganizationNameRouteChildren: AuthOrganizationsOrganizationNameRouteChildren =
  {
    AuthOrganizationsOrganizationNameAddProductsLazyRoute:
      AuthOrganizationsOrganizationNameAddProductsLazyRoute,
    AuthOrganizationsOrganizationNameAlertsLazyRoute:
      AuthOrganizationsOrganizationNameAlertsLazyRoute,
    AuthOrganizationsOrganizationNameOverviewLazyRoute:
      AuthOrganizationsOrganizationNameOverviewLazyRoute,
    AuthOrganizationsOrganizationNameProductsLazyRoute:
      AuthOrganizationsOrganizationNameProductsLazyRoute,
    AuthOrganizationsOrganizationNameIndexLazyRoute:
      AuthOrganizationsOrganizationNameIndexLazyRoute,
  }

const AuthOrganizationsOrganizationNameRouteWithChildren =
  AuthOrganizationsOrganizationNameRoute._addFileChildren(
    AuthOrganizationsOrganizationNameRouteChildren,
  )

interface AuthOrganizationsRouteChildren {
  AuthOrganizationsOrganizationNameRoute: typeof AuthOrganizationsOrganizationNameRouteWithChildren
  AuthOrganizationsMyOrganizationsLazyRoute: typeof AuthOrganizationsMyOrganizationsLazyRoute
  AuthOrganizationsIndexLazyRoute: typeof AuthOrganizationsIndexLazyRoute
}

const AuthOrganizationsRouteChildren: AuthOrganizationsRouteChildren = {
  AuthOrganizationsOrganizationNameRoute:
    AuthOrganizationsOrganizationNameRouteWithChildren,
  AuthOrganizationsMyOrganizationsLazyRoute:
    AuthOrganizationsMyOrganizationsLazyRoute,
  AuthOrganizationsIndexLazyRoute: AuthOrganizationsIndexLazyRoute,
}

const AuthOrganizationsRouteWithChildren =
  AuthOrganizationsRoute._addFileChildren(AuthOrganizationsRouteChildren)

interface AuthSuperadminRouteChildren {
  AuthSuperadminCreateOrganizationLazyRoute: typeof AuthSuperadminCreateOrganizationLazyRoute
  AuthSuperadminDataStatusLazyRoute: typeof AuthSuperadminDataStatusLazyRoute
  AuthSuperadminDataSynchronizationLazyRoute: typeof AuthSuperadminDataSynchronizationLazyRoute
  AuthSuperadminManageOrganizationsLazyRoute: typeof AuthSuperadminManageOrganizationsLazyRoute
  AuthSuperadminViewFeedbackLazyRoute: typeof AuthSuperadminViewFeedbackLazyRoute
  AuthSuperadminIndexLazyRoute: typeof AuthSuperadminIndexLazyRoute
}

const AuthSuperadminRouteChildren: AuthSuperadminRouteChildren = {
  AuthSuperadminCreateOrganizationLazyRoute:
    AuthSuperadminCreateOrganizationLazyRoute,
  AuthSuperadminDataStatusLazyRoute: AuthSuperadminDataStatusLazyRoute,
  AuthSuperadminDataSynchronizationLazyRoute:
    AuthSuperadminDataSynchronizationLazyRoute,
  AuthSuperadminManageOrganizationsLazyRoute:
    AuthSuperadminManageOrganizationsLazyRoute,
  AuthSuperadminViewFeedbackLazyRoute: AuthSuperadminViewFeedbackLazyRoute,
  AuthSuperadminIndexLazyRoute: AuthSuperadminIndexLazyRoute,
}

const AuthSuperadminRouteWithChildren = AuthSuperadminRoute._addFileChildren(
  AuthSuperadminRouteChildren,
)

interface AuthUserRouteChildren {
  AuthUserProfileRoute: typeof AuthUserProfileRoute
  AuthUserIndexLazyRoute: typeof AuthUserIndexLazyRoute
}

const AuthUserRouteChildren: AuthUserRouteChildren = {
  AuthUserProfileRoute: AuthUserProfileRoute,
  AuthUserIndexLazyRoute: AuthUserIndexLazyRoute,
}

const AuthUserRouteWithChildren = AuthUserRoute._addFileChildren(
  AuthUserRouteChildren,
)

interface AuthRouteChildren {
  AuthGlossaryRoute: typeof AuthGlossaryRouteWithChildren
  AuthOrgAdminRoute: typeof AuthOrgAdminRouteWithChildren
  AuthOrganizationsRoute: typeof AuthOrganizationsRouteWithChildren
  AuthSuperadminRoute: typeof AuthSuperadminRouteWithChildren
  AuthUserRoute: typeof AuthUserRouteWithChildren
  AuthFeedbackLazyRoute: typeof AuthFeedbackLazyRoute
  AuthSupportLazyRoute: typeof AuthSupportLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthGlossaryRoute: AuthGlossaryRouteWithChildren,
  AuthOrgAdminRoute: AuthOrgAdminRouteWithChildren,
  AuthOrganizationsRoute: AuthOrganizationsRouteWithChildren,
  AuthSuperadminRoute: AuthSuperadminRouteWithChildren,
  AuthUserRoute: AuthUserRouteWithChildren,
  AuthFeedbackLazyRoute: AuthFeedbackLazyRoute,
  AuthSupportLazyRoute: AuthSupportLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface LoginRouteChildren {
  LoginRecoverPasswordLazyRoute: typeof LoginRecoverPasswordLazyRoute
  LoginResetPasswordLazyRoute: typeof LoginResetPasswordLazyRoute
  LoginIndexRouteRoute: typeof LoginIndexRouteRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginRecoverPasswordLazyRoute: LoginRecoverPasswordLazyRoute,
  LoginResetPasswordLazyRoute: LoginResetPasswordLazyRoute,
  LoginIndexRouteRoute: LoginIndexRouteRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/accept-organization-invitation': typeof AcceptOrganizationInvitationLazyRoute
  '/auth/glossary': typeof AuthGlossaryRouteWithChildren
  '/auth/org-admin': typeof AuthOrgAdminRouteWithChildren
  '/auth/organizations': typeof AuthOrganizationsRouteWithChildren
  '/auth/superadmin': typeof AuthSuperadminRouteWithChildren
  '/auth/user': typeof AuthUserRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login/': typeof LoginIndexRouteRoute
  '/auth/glossary/match-explorer': typeof AuthGlossaryMatchExplorerRoute
  '/auth/organizations/$organizationName': typeof AuthOrganizationsOrganizationNameRouteWithChildren
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/glossary/cpe-explorer': typeof AuthGlossaryCpeExplorerLazyRoute
  '/auth/glossary/cve-explorer': typeof AuthGlossaryCveExplorerLazyRoute
  '/auth/org-admin/manage-organizations': typeof AuthOrgAdminManageOrganizationsLazyRoute
  '/auth/organizations/my-organizations': typeof AuthOrganizationsMyOrganizationsLazyRoute
  '/auth/superadmin/create-organization': typeof AuthSuperadminCreateOrganizationLazyRoute
  '/auth/superadmin/data-status': typeof AuthSuperadminDataStatusLazyRoute
  '/auth/superadmin/data-synchronization': typeof AuthSuperadminDataSynchronizationLazyRoute
  '/auth/superadmin/manage-organizations': typeof AuthSuperadminManageOrganizationsLazyRoute
  '/auth/superadmin/view-feedback': typeof AuthSuperadminViewFeedbackLazyRoute
  '/auth/org-admin/': typeof AuthOrgAdminIndexLazyRoute
  '/auth/organizations/': typeof AuthOrganizationsIndexLazyRoute
  '/auth/superadmin/': typeof AuthSuperadminIndexLazyRoute
  '/auth/user/': typeof AuthUserIndexLazyRoute
  '/auth/organizations/$organizationName/add-products': typeof AuthOrganizationsOrganizationNameAddProductsLazyRoute
  '/auth/organizations/$organizationName/alerts': typeof AuthOrganizationsOrganizationNameAlertsLazyRoute
  '/auth/organizations/$organizationName/overview': typeof AuthOrganizationsOrganizationNameOverviewLazyRoute
  '/auth/organizations/$organizationName/products': typeof AuthOrganizationsOrganizationNameProductsLazyRoute
  '/auth/organizations/$organizationName/': typeof AuthOrganizationsOrganizationNameIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/accept-organization-invitation': typeof AcceptOrganizationInvitationLazyRoute
  '/auth/glossary': typeof AuthGlossaryRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login': typeof LoginIndexRouteRoute
  '/auth/glossary/match-explorer': typeof AuthGlossaryMatchExplorerRoute
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/glossary/cpe-explorer': typeof AuthGlossaryCpeExplorerLazyRoute
  '/auth/glossary/cve-explorer': typeof AuthGlossaryCveExplorerLazyRoute
  '/auth/org-admin/manage-organizations': typeof AuthOrgAdminManageOrganizationsLazyRoute
  '/auth/organizations/my-organizations': typeof AuthOrganizationsMyOrganizationsLazyRoute
  '/auth/superadmin/create-organization': typeof AuthSuperadminCreateOrganizationLazyRoute
  '/auth/superadmin/data-status': typeof AuthSuperadminDataStatusLazyRoute
  '/auth/superadmin/data-synchronization': typeof AuthSuperadminDataSynchronizationLazyRoute
  '/auth/superadmin/manage-organizations': typeof AuthSuperadminManageOrganizationsLazyRoute
  '/auth/superadmin/view-feedback': typeof AuthSuperadminViewFeedbackLazyRoute
  '/auth/org-admin': typeof AuthOrgAdminIndexLazyRoute
  '/auth/organizations': typeof AuthOrganizationsIndexLazyRoute
  '/auth/superadmin': typeof AuthSuperadminIndexLazyRoute
  '/auth/user': typeof AuthUserIndexLazyRoute
  '/auth/organizations/$organizationName/add-products': typeof AuthOrganizationsOrganizationNameAddProductsLazyRoute
  '/auth/organizations/$organizationName/alerts': typeof AuthOrganizationsOrganizationNameAlertsLazyRoute
  '/auth/organizations/$organizationName/overview': typeof AuthOrganizationsOrganizationNameOverviewLazyRoute
  '/auth/organizations/$organizationName/products': typeof AuthOrganizationsOrganizationNameProductsLazyRoute
  '/auth/organizations/$organizationName': typeof AuthOrganizationsOrganizationNameIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/accept-organization-invitation': typeof AcceptOrganizationInvitationLazyRoute
  '/auth/glossary': typeof AuthGlossaryRouteWithChildren
  '/auth/org-admin': typeof AuthOrgAdminRouteWithChildren
  '/auth/organizations': typeof AuthOrganizationsRouteWithChildren
  '/auth/superadmin': typeof AuthSuperadminRouteWithChildren
  '/auth/user': typeof AuthUserRouteWithChildren
  '/auth/feedback': typeof AuthFeedbackLazyRoute
  '/auth/support': typeof AuthSupportLazyRoute
  '/login/recover-password': typeof LoginRecoverPasswordLazyRoute
  '/login/reset-password': typeof LoginResetPasswordLazyRoute
  '/register/create-account': typeof RegisterCreateAccountLazyRoute
  '/login/': typeof LoginIndexRouteRoute
  '/auth/glossary/match-explorer': typeof AuthGlossaryMatchExplorerRoute
  '/auth/organizations/$organizationName': typeof AuthOrganizationsOrganizationNameRouteWithChildren
  '/auth/user/profile': typeof AuthUserProfileRoute
  '/auth/glossary/cpe-explorer': typeof AuthGlossaryCpeExplorerLazyRoute
  '/auth/glossary/cve-explorer': typeof AuthGlossaryCveExplorerLazyRoute
  '/auth/org-admin/manage-organizations': typeof AuthOrgAdminManageOrganizationsLazyRoute
  '/auth/organizations/my-organizations': typeof AuthOrganizationsMyOrganizationsLazyRoute
  '/auth/superadmin/create-organization': typeof AuthSuperadminCreateOrganizationLazyRoute
  '/auth/superadmin/data-status': typeof AuthSuperadminDataStatusLazyRoute
  '/auth/superadmin/data-synchronization': typeof AuthSuperadminDataSynchronizationLazyRoute
  '/auth/superadmin/manage-organizations': typeof AuthSuperadminManageOrganizationsLazyRoute
  '/auth/superadmin/view-feedback': typeof AuthSuperadminViewFeedbackLazyRoute
  '/auth/org-admin/': typeof AuthOrgAdminIndexLazyRoute
  '/auth/organizations/': typeof AuthOrganizationsIndexLazyRoute
  '/auth/superadmin/': typeof AuthSuperadminIndexLazyRoute
  '/auth/user/': typeof AuthUserIndexLazyRoute
  '/auth/organizations/$organizationName/add-products': typeof AuthOrganizationsOrganizationNameAddProductsLazyRoute
  '/auth/organizations/$organizationName/alerts': typeof AuthOrganizationsOrganizationNameAlertsLazyRoute
  '/auth/organizations/$organizationName/overview': typeof AuthOrganizationsOrganizationNameOverviewLazyRoute
  '/auth/organizations/$organizationName/products': typeof AuthOrganizationsOrganizationNameProductsLazyRoute
  '/auth/organizations/$organizationName/': typeof AuthOrganizationsOrganizationNameIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/login'
    | '/accept-organization-invitation'
    | '/auth/glossary'
    | '/auth/org-admin'
    | '/auth/organizations'
    | '/auth/superadmin'
    | '/auth/user'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login/'
    | '/auth/glossary/match-explorer'
    | '/auth/organizations/$organizationName'
    | '/auth/user/profile'
    | '/auth/glossary/cpe-explorer'
    | '/auth/glossary/cve-explorer'
    | '/auth/org-admin/manage-organizations'
    | '/auth/organizations/my-organizations'
    | '/auth/superadmin/create-organization'
    | '/auth/superadmin/data-status'
    | '/auth/superadmin/data-synchronization'
    | '/auth/superadmin/manage-organizations'
    | '/auth/superadmin/view-feedback'
    | '/auth/org-admin/'
    | '/auth/organizations/'
    | '/auth/superadmin/'
    | '/auth/user/'
    | '/auth/organizations/$organizationName/add-products'
    | '/auth/organizations/$organizationName/alerts'
    | '/auth/organizations/$organizationName/overview'
    | '/auth/organizations/$organizationName/products'
    | '/auth/organizations/$organizationName/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/accept-organization-invitation'
    | '/auth/glossary'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login'
    | '/auth/glossary/match-explorer'
    | '/auth/user/profile'
    | '/auth/glossary/cpe-explorer'
    | '/auth/glossary/cve-explorer'
    | '/auth/org-admin/manage-organizations'
    | '/auth/organizations/my-organizations'
    | '/auth/superadmin/create-organization'
    | '/auth/superadmin/data-status'
    | '/auth/superadmin/data-synchronization'
    | '/auth/superadmin/manage-organizations'
    | '/auth/superadmin/view-feedback'
    | '/auth/org-admin'
    | '/auth/organizations'
    | '/auth/superadmin'
    | '/auth/user'
    | '/auth/organizations/$organizationName/add-products'
    | '/auth/organizations/$organizationName/alerts'
    | '/auth/organizations/$organizationName/overview'
    | '/auth/organizations/$organizationName/products'
    | '/auth/organizations/$organizationName'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/login'
    | '/accept-organization-invitation'
    | '/auth/glossary'
    | '/auth/org-admin'
    | '/auth/organizations'
    | '/auth/superadmin'
    | '/auth/user'
    | '/auth/feedback'
    | '/auth/support'
    | '/login/recover-password'
    | '/login/reset-password'
    | '/register/create-account'
    | '/login/'
    | '/auth/glossary/match-explorer'
    | '/auth/organizations/$organizationName'
    | '/auth/user/profile'
    | '/auth/glossary/cpe-explorer'
    | '/auth/glossary/cve-explorer'
    | '/auth/org-admin/manage-organizations'
    | '/auth/organizations/my-organizations'
    | '/auth/superadmin/create-organization'
    | '/auth/superadmin/data-status'
    | '/auth/superadmin/data-synchronization'
    | '/auth/superadmin/manage-organizations'
    | '/auth/superadmin/view-feedback'
    | '/auth/org-admin/'
    | '/auth/organizations/'
    | '/auth/superadmin/'
    | '/auth/user/'
    | '/auth/organizations/$organizationName/add-products'
    | '/auth/organizations/$organizationName/alerts'
    | '/auth/organizations/$organizationName/overview'
    | '/auth/organizations/$organizationName/products'
    | '/auth/organizations/$organizationName/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  AcceptOrganizationInvitationLazyRoute: typeof AcceptOrganizationInvitationLazyRoute
  RegisterCreateAccountLazyRoute: typeof RegisterCreateAccountLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  AcceptOrganizationInvitationLazyRoute: AcceptOrganizationInvitationLazyRoute,
  RegisterCreateAccountLazyRoute: RegisterCreateAccountLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.lazy.tsx",
      "children": [
        "/",
        "/auth",
        "/login",
        "/accept-organization-invitation",
        "/register/create-account"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/glossary",
        "/auth/org-admin",
        "/auth/organizations",
        "/auth/superadmin",
        "/auth/user",
        "/auth/feedback",
        "/auth/support"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/recover-password",
        "/login/reset-password",
        "/login/"
      ]
    },
    "/accept-organization-invitation": {
      "filePath": "accept-organization-invitation.lazy.tsx"
    },
    "/auth/glossary": {
      "filePath": "auth/glossary.tsx",
      "parent": "/auth",
      "children": [
        "/auth/glossary/match-explorer",
        "/auth/glossary/cpe-explorer",
        "/auth/glossary/cve-explorer"
      ]
    },
    "/auth/org-admin": {
      "filePath": "auth/org-admin.tsx",
      "parent": "/auth",
      "children": [
        "/auth/org-admin/manage-organizations",
        "/auth/org-admin/"
      ]
    },
    "/auth/organizations": {
      "filePath": "auth/organizations.tsx",
      "parent": "/auth",
      "children": [
        "/auth/organizations/$organizationName",
        "/auth/organizations/my-organizations",
        "/auth/organizations/"
      ]
    },
    "/auth/superadmin": {
      "filePath": "auth/superadmin.tsx",
      "parent": "/auth",
      "children": [
        "/auth/superadmin/create-organization",
        "/auth/superadmin/data-status",
        "/auth/superadmin/data-synchronization",
        "/auth/superadmin/manage-organizations",
        "/auth/superadmin/view-feedback",
        "/auth/superadmin/"
      ]
    },
    "/auth/user": {
      "filePath": "auth/user.tsx",
      "parent": "/auth",
      "children": [
        "/auth/user/profile",
        "/auth/user/"
      ]
    },
    "/auth/feedback": {
      "filePath": "auth/feedback.lazy.tsx",
      "parent": "/auth"
    },
    "/auth/support": {
      "filePath": "auth/support.lazy.tsx",
      "parent": "/auth"
    },
    "/login/recover-password": {
      "filePath": "login/recover-password.lazy.tsx",
      "parent": "/login"
    },
    "/login/reset-password": {
      "filePath": "login/reset-password.lazy.tsx",
      "parent": "/login"
    },
    "/register/create-account": {
      "filePath": "register/create-account.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.route.tsx",
      "parent": "/login"
    },
    "/auth/glossary/match-explorer": {
      "filePath": "auth/glossary/match-explorer.tsx",
      "parent": "/auth/glossary"
    },
    "/auth/organizations/$organizationName": {
      "filePath": "auth/organizations/$organizationName.tsx",
      "parent": "/auth/organizations",
      "children": [
        "/auth/organizations/$organizationName/add-products",
        "/auth/organizations/$organizationName/alerts",
        "/auth/organizations/$organizationName/overview",
        "/auth/organizations/$organizationName/products",
        "/auth/organizations/$organizationName/"
      ]
    },
    "/auth/user/profile": {
      "filePath": "auth/user/profile.tsx",
      "parent": "/auth/user"
    },
    "/auth/glossary/cpe-explorer": {
      "filePath": "auth/glossary/cpe-explorer.lazy.tsx",
      "parent": "/auth/glossary"
    },
    "/auth/glossary/cve-explorer": {
      "filePath": "auth/glossary/cve-explorer.lazy.tsx",
      "parent": "/auth/glossary"
    },
    "/auth/org-admin/manage-organizations": {
      "filePath": "auth/org-admin/manage-organizations.lazy.tsx",
      "parent": "/auth/org-admin"
    },
    "/auth/organizations/my-organizations": {
      "filePath": "auth/organizations/my-organizations.lazy.tsx",
      "parent": "/auth/organizations"
    },
    "/auth/superadmin/create-organization": {
      "filePath": "auth/superadmin/create-organization.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/superadmin/data-status": {
      "filePath": "auth/superadmin/data-status.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/superadmin/data-synchronization": {
      "filePath": "auth/superadmin/data-synchronization.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/superadmin/manage-organizations": {
      "filePath": "auth/superadmin/manage-organizations.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/superadmin/view-feedback": {
      "filePath": "auth/superadmin/view-feedback.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/org-admin/": {
      "filePath": "auth/org-admin/index.lazy.tsx",
      "parent": "/auth/org-admin"
    },
    "/auth/organizations/": {
      "filePath": "auth/organizations/index.lazy.tsx",
      "parent": "/auth/organizations"
    },
    "/auth/superadmin/": {
      "filePath": "auth/superadmin/index.lazy.tsx",
      "parent": "/auth/superadmin"
    },
    "/auth/user/": {
      "filePath": "auth/user/index.lazy.tsx",
      "parent": "/auth/user"
    },
    "/auth/organizations/$organizationName/add-products": {
      "filePath": "auth/organizations/$organizationName/add-products.lazy.tsx",
      "parent": "/auth/organizations/$organizationName"
    },
    "/auth/organizations/$organizationName/alerts": {
      "filePath": "auth/organizations/$organizationName/alerts.lazy.tsx",
      "parent": "/auth/organizations/$organizationName"
    },
    "/auth/organizations/$organizationName/overview": {
      "filePath": "auth/organizations/$organizationName/overview.lazy.tsx",
      "parent": "/auth/organizations/$organizationName"
    },
    "/auth/organizations/$organizationName/products": {
      "filePath": "auth/organizations/$organizationName/products.lazy.tsx",
      "parent": "/auth/organizations/$organizationName"
    },
    "/auth/organizations/$organizationName/": {
      "filePath": "auth/organizations/$organizationName/index.lazy.tsx",
      "parent": "/auth/organizations/$organizationName"
    }
  }
}
ROUTE_MANIFEST_END */
